local colors = require("colors")
local icons = require("icons")
local settings = require("settings")
local app_icons = require("helpers.app_icons")

local spaces = {}

-- Function to create a space with all its associated elements
local function create_space(workspace_id)
  local space = sbar.add("space", "space." .. workspace_id, {
    space = workspace_id,
    icon = {
      font = { family = settings.font.numbers },
      string = workspace_id,
      padding_left = 15,
      padding_right = 8,
      color = colors.white,
      highlight_color = colors.red,
    },
    label = {
      padding_right = 20,
      color = colors.grey,
      highlight_color = colors.white,
      font = "sketchybar-app-font:Regular:16.0",
      y_offset = -1,
    },
    padding_right = 1,
    padding_left = 1,
    background = {
      color = colors.bg1,
      border_width = 1,
      height = 26,
      border_color = colors.black,
    },
    popup = { background = { border_width = 5, border_color = colors.black } }
  })

  spaces[workspace_id] = space

  -- Single item bracket for space items to achieve double border on highlight
  local space_bracket = sbar.add("bracket", { space.name }, {
    background = {
      color = colors.transparent,
      border_color = colors.bg2,
      height = 28,
      border_width = 2
    }
  })

  -- Store bracket reference for later use
  space.bracket = space_bracket

  -- Padding space
  sbar.add("space", "space.padding." .. workspace_id, {
    space = workspace_id,
    script = "",
    width = settings.group_paddings,
  })

  local space_popup = sbar.add("item", {
    position = "popup." .. space.name,
    padding_left= 5,
    padding_right= 0,
    background = {
      drawing = true,
      image = {
        corner_radius = 9,
        scale = 0.2
      }
    }
  })

  space:subscribe("mouse.clicked", function(env)
    if env.BUTTON == "other" then
      space_popup:set({ background = { image = "space." .. env.SID } })
      space:set({ popup = { drawing = "toggle" } })
    else
      -- AeroSpace commands
      if env.BUTTON == "right" then
        sbar.exec("aerospace close-all-windows-except-current")
      else
        -- Left click - focus workspace
        sbar.exec("aerospace workspace " .. workspace_id)
      end
    end
  end)

  space:subscribe("mouse.exited", function(_)
    space:set({ popup = { drawing = false } })
  end)
end

-- Function to update workspaces dynamically
local function update_workspaces()
  sbar.exec("aerospace list-workspaces --all", function(workspaces_output)
    -- Clear existing spaces first (optional, depends on your needs)
    -- You might want to keep this commented out to avoid flickering
    -- for id, space in pairs(spaces) do
    --   sbar.remove(space.name)
    -- end
    -- spaces = {}
    
    -- Parse workspace IDs from output
    local workspace_ids = {}
    for line in workspaces_output:gmatch("[^\r\n]+") do
      local workspace_id = tonumber(line:match("^%s*(%d+)"))
      if workspace_id then
        table.insert(workspace_ids, workspace_id)
      end
    end
    
    -- Sort workspace IDs to maintain consistent order
    table.sort(workspace_ids)
    
    -- Create spaces for each workspace
    for _, workspace_id in ipairs(workspace_ids) do
      if not spaces[workspace_id] then
        create_space(workspace_id)
      end
    end
  end)
end

-- Initialize workspaces
update_workspaces()

-- Observer for window changes (adapted for AeroSpace)
local space_window_observer = sbar.add("item", {
  drawing = false,
  updates = true,
})

local spaces_indicator = sbar.add("item", {
  padding_left = -3,
  padding_right = 0,
  icon = {
    padding_left = 8,
    padding_right = 9,
    color = colors.grey,
    string = icons.switch.on,
  },
  label = {
    width = 0,
    padding_left = 0,
    padding_right = 8,
    string = "Spaces",
    color = colors.bg1,
  },
  background = {
    color = colors.with_alpha(colors.grey, 0.0),
    border_color = colors.with_alpha(colors.bg1, 0.0),
  }
})

space_window_observer:subscribe("aerospace_workspace_change", function(env)
  local focused_id = tonumber(env.FOCUSED_WORKSPACE)
  
  -- Update workspace list when workspace changes (in case new workspaces were created)
  update_workspaces()
  
  -- Update highlighting for all spaces
  for workspace_id, space in pairs(spaces) do
    local selected = workspace_id == focused_id
    space:set({
      icon = { highlight = selected },
      label = { highlight = selected },
      background = { border_color = selected and colors.black or colors.bg2 }
    })
    if space.bracket then
      space.bracket:set({
        background = { border_color = selected and colors.grey or colors.bg2 }
      })
    end
  end
  
  -- Update existing workspaces with app icons
  for workspace_id, space in pairs(spaces) do
    sbar.exec("aerospace list-windows --workspace " .. workspace_id .. " --format '%{app-name}'", function(windows_output)
      local icon_line = ""
      local has_apps = false

      for app_name in windows_output:gmatch("[^\r\n]+") do
        if app_name and app_name ~= "" then
          has_apps = true
          local icon = app_icons[app_name] or app_icons["Default"]
          icon_line = icon_line .. icon
        end
      end

      if has_apps or workspace_id == focused_id then
        space:set({
          drawing = true,
          label = has_apps and icon_line or " â€”",
        })
      else
        space:set({ drawing = false })
      end
    end)
  end
end)

spaces_indicator:subscribe("swap_menus_and_spaces", function(env)
  local currently_on = spaces_indicator:query().icon.value == icons.switch.on
  spaces_indicator:set({
    icon = currently_on and icons.switch.off or icons.switch.on
  })
end)

spaces_indicator:subscribe("mouse.entered", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 1.0 },
        border_color = { alpha = 1.0 },
      },
      icon = { color = colors.bg1 },
      label = { width = "dynamic" }
    })
  end)
end)

spaces_indicator:subscribe("mouse.exited", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 0.0 },
        border_color = { alpha = 0.0 },
      },
      icon = { color = colors.grey },
      label = { width = 0, }
    })
  end)
end)

spaces_indicator:subscribe("mouse.clicked", function(env)
  sbar.trigger("swap_menus_and_spaces")
end)
